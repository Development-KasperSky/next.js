on:
  push:
    branches: [canary]
  pull_request:
    types: [opened, synchronize]

name: Build, test, and deploy

jobs:
  check-examples:
    name: Check examples
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install moreutils
        run: sudo apt install moreutils
      - name: Check examples
        run: ./scripts/check-examples.sh

  build:
    runs-on: ubuntu-latest
    env:
      NEXT_TELEMETRY_DISABLED: 1
      # we build a dev binary for use in CI so skip downloading
      # canary next-swc binaries in the monorepo
      NEXT_SKIP_NATIVE_POSTINSTALL: 1
    outputs:
      docsChange: ${{ steps.docs-change.outputs.DOCS_CHANGE }}
      isRelease: ${{ steps.check-release.outputs.IS_RELEASE }}
      weekNum: ${{ steps.get-week.outputs.WEEK }}
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        if: ${{ steps.docs-change.outputs.docsChange != 'docs only change' }}
        with:
          node-version: 14

      - uses: actions/checkout@v2
        with:
          fetch-depth: 25

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - run: yarn install --frozen-lockfile --check-files
      - run: node run-tests.js --timings --write-timings -g 1/1
      - run: node ./scripts/fetch-tags.mjs ${{ github.sha }}

      - name: Check docs only change
        run: echo ::set-output name=DOCS_CHANGE::$(node skip-docs-change.js echo 'not-docs-only-change')
        id: docs-change

      - run: echo ${{steps.docs-change.outputs.DOCS_CHANGE}}
      - id: check-release
        run: |
          if [[ $(git describe --exact-match 2> /dev/null || :) = v* ]];
            then
              echo "::set-output name=IS_RELEASE::true"
            else
              echo "::set-output name=IS_RELEASE::false"
          fi
      # We use week in the turbo cache key to keep the cache from infinitely growing
      - id: get-week
        run: echo ::set-output name=WEEK::$(date +%U)

      - uses: actions/cache@v2
        id: cache-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}

  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        if: ${{ steps.docs-change.outputs.docsChange != 'docs only change' }}
        with:
          node-version: 14

      - uses: actions/cache@v2
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}
      - run: ./scripts/check-manifests.js
      - run: yarn lint

  checkPrecompiled:
    name: Check Pre-compiled
    runs-on: ubuntu-latest
    needs: build
    env:
      NEXT_TELEMETRY_DISABLED: 1
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        if: ${{ steps.docs-change.outputs.docsChange != 'docs only change' }}
        with:
          node-version: 14

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/checkout@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - run: mv .git .git-bak
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - uses: actions/cache@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}

      - run: rm -rf .git && mv .git-bak .git
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - run: ./scripts/check-pre-compiled.sh
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - uses: EndBug/add-and-commit@v7
        if: ${{ failure() }}
        with:
          add: 'packages/next/compiled packages/next/bundles --force'
          message: 'âš™ Update compiled files'

  testUnit:
    name: Test Unit
    runs-on: ubuntu-latest
    needs: [build, build-native-dev]
    env:
      NEXT_TELEMETRY_DISABLED: 1
      NEXT_TEST_JOB: 1
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        if: ${{ steps.docs-change.outputs.docsChange != 'docs only change' }}
        with:
          node-version: 14

      - uses: actions/cache@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}

      - uses: actions/download-artifact@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        with:
          name: next-swc-dev-binary
          path: packages/next-swc/native

      - run: node run-tests.js --type unit
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

  testDev:
    name: Test Development
    runs-on: ubuntu-latest
    needs: [build, build-native-dev]
    env:
      NEXT_TELEMETRY_DISABLED: 1
      NEXT_TEST_JOB: 1
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        if: ${{ steps.docs-change.outputs.docsChange != 'docs only change' }}
        with:
          node-version: 14

      - run: echo ${{needs.build.outputs.docsChange}}

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}

      - uses: actions/download-artifact@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        with:
          name: next-swc-dev-binary
          path: packages/next-swc/native

      - run: npm i -g playwright-chromium@1.14.1 && npx playwright install-deps
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - run: node run-tests.js --type development
        name: Run test/development
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - run: NEXT_TEST_MODE=dev node run-tests.js --type e2e
        name: Run test/e2e (dev)
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - name: Upload test trace
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-trace
          if-no-files-found: ignore
          retention-days: 2
          path: |
            test/traces

  testProd:
    name: Test Production
    runs-on: ubuntu-latest
    needs: [build, build-native-dev]
    env:
      NEXT_TELEMETRY_DISABLED: 1
      NEXT_TEST_JOB: 1
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        if: ${{ steps.docs-change.outputs.docsChange != 'docs only change' }}
        with:
          node-version: 14

      - run: echo ${{needs.build.outputs.docsChange}}

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}

      - uses: actions/download-artifact@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        with:
          name: next-swc-dev-binary
          path: packages/next-swc/native

      - run: npm i -g playwright-chromium@1.14.1 && npx playwright install-deps
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - run: node run-tests.js --type production
        name: Run test/production
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - run: NEXT_TEST_MODE=start node run-tests.js --type e2e
        name: Run test/e2e (production)
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

  testIntegration:
    name: Test Integration
    runs-on: ubuntu-latest
    needs: [build, build-native-dev]
    env:
      NEXT_TELEMETRY_DISABLED: 1
      NEXT_TEST_JOB: 1
      TEST_TIMINGS_TOKEN: ${{ secrets.TEST_TIMINGS_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        group: [1, 2, 3, 4, 5, 6]
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        if: ${{ steps.docs-change.outputs.docsChange != 'docs only change' }}
        with:
          node-version: 14

      - run: echo ${{needs.build.outputs.docsChange}}

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}

      - uses: actions/download-artifact@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        with:
          name: next-swc-dev-binary
          path: packages/next-swc/native

      - run: npm i -g playwright-chromium@1.14.1 && npx playwright install-deps
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - run: xvfb-run node run-tests.js --timings -g ${{ matrix.group }}/6
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - name: Upload test trace
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-trace
          if-no-files-found: ignore
          retention-days: 2
          path: |
            test/traces

  testElectron:
    name: Test Electron
    runs-on: ubuntu-latest
    needs: [build, build-native-dev]
    env:
      NEXT_TELEMETRY_DISABLED: 1
      NEXT_TEST_JOB: 1
      TEST_ELECTRON: 1
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        if: ${{ steps.docs-change.outputs.docsChange != 'docs only change' }}
        with:
          node-version: 14

      - uses: actions/cache@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}

      - uses: actions/download-artifact@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        with:
          name: next-swc-dev-binary
          path: packages/next-swc/native

      - run: cd test/integration/with-electron/app && yarn
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - run: xvfb-run node run-tests.js test/integration/with-electron/test/index.test.js
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

  testYarnPnP:
    runs-on: ubuntu-latest
    needs: [build, build-native-dev]
    env:
      NODE_OPTIONS: '--unhandled-rejections=strict'
      YARN_COMPRESSION_LEVEL: '0'
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        if: ${{ steps.docs-change.outputs.docsChange != 'docs only change' }}
        with:
          node-version: 14

      - uses: actions/cache@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}

      - uses: actions/download-artifact@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        with:
          name: next-swc-dev-binary
          path: packages/next-swc/native

      - run: bash ./scripts/test-pnp.sh
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

  testsPass:
    name: thank you, next
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        check-examples,
        test-native,
        checkPrecompiled,
        testIntegration,
        testUnit,
        testYarnPnP,
        testDev,
        testProd,
      ]
    steps:
      - run: exit 0

  testFirefox:
    name: Test Firefox (production)
    runs-on: ubuntu-latest
    needs: [build, build-native-dev]
    env:
      BROWSER_NAME: 'firefox'
      NEXT_TELEMETRY_DISABLED: 1
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        if: ${{ steps.docs-change.outputs.docsChange != 'docs only change' }}
        with:
          node-version: 14

      - uses: actions/cache@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}
      - uses: actions/download-artifact@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        with:
          name: next-swc-dev-binary
          path: packages/next-swc/native
      - run: npx playwright install-deps && npx playwright install firefox
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
      - run: node run-tests.js test/integration/production/test/index.test.js
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

  testSafari:
    name: Test Safari (production)
    runs-on: ubuntu-latest
    needs: [build, build-native-dev]
    env:
      BROWSERSTACK: true
      BROWSER_NAME: 'safari'
      NEXT_TELEMETRY_DISABLED: 1
      SKIP_LOCAL_SELENIUM_SERVER: true
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        if: ${{ steps.docs-change.outputs.docsChange != 'docs only change' }}
        with:
          node-version: 14

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}

      - uses: actions/download-artifact@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        with:
          name: next-swc-dev-binary
          path: packages/next-swc/native

      # TODO: use macos runner so that we can use playwright to test against
      # PRs instead of only running on canary?
      - run: '[[ -z "$BROWSERSTACK_ACCESS_KEY" ]] && echo "Skipping for PR" || npm i -g browserstack-local@1.4.0'
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - run: '[[ -z "$BROWSERSTACK_ACCESS_KEY" ]] && echo "Skipping for PR" || node run-tests.js -c 1 test/integration/production/test/index.test.js'
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

  testSafariOld:
    name: Test Safari 10.1 (nav)
    runs-on: ubuntu-latest
    needs: [build, testSafari, build-native-dev]
    env:
      BROWSERSTACK: true
      LEGACY_SAFARI: true
      BROWSER_NAME: 'safari'
      NEXT_TELEMETRY_DISABLED: 1
      SKIP_LOCAL_SELENIUM_SERVER: true
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        if: ${{ steps.docs-change.outputs.docsChange != 'docs only change' }}
        with:
          node-version: 14

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}

      - uses: actions/download-artifact@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        with:
          name: next-swc-dev-binary
          path: packages/next-swc/native

      - run: '[[ -z "$BROWSERSTACK_ACCESS_KEY" ]] && echo "Skipping for PR" || npm i -g browserstack-local@1.4.0'
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - run: '[[ -z "$BROWSERSTACK_ACCESS_KEY" ]] && echo "Skipping for PR" || node run-tests.js test/integration/production-nav/test/index.test.js'
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

  testFirefoxNode17:
    name: Test Firefox Node.js 17
    runs-on: ubuntu-latest
    needs: [build, testFirefox, build-native-dev]
    env:
      BROWSER_NAME: 'firefox'
      NEXT_TELEMETRY_DISABLED: 1
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        if: ${{ steps.docs-change.outputs.docsChange != 'docs only change' }}
        with:
          node-version: 17
          check-latest: true
      - uses: actions/cache@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}
      - uses: actions/download-artifact@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        with:
          name: next-swc-dev-binary
          path: packages/next-swc/native
      - run: npx playwright install-deps && npx playwright install firefox
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
      - run: node run-tests.js test/integration/production/test/index.test.js
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

  publishRelease:
    if: ${{ needs.build.outputs.isRelease == 'true' }}
    name: Potentially publish release
    runs-on: ubuntu-latest
    needs:
      - build
      - build-wasm
      - build-native
      - build-windows-i686
      - build-windows-aarch64
      - build-linux-musl
      - build-linux-arm7
      - build-linux-aarch64
      - build-android-aarch64
      - build-linux-aarch64-musl
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN_ELEVATED }}
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        if: ${{ steps.docs-change.outputs.docsChange != 'docs only change' }}
        with:
          node-version: 14

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v2
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}

      - uses: actions/download-artifact@v2
        with:
          name: next-swc-binaries
          path: packages/next-swc/native

      - uses: actions/download-artifact@v2
        with:
          name: wasm-binaries
          path: packages/next-swc/crates/wasm

      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run: ./scripts/publish-native.js $GITHUB_REF
      - run: ./scripts/publish-release.sh

  releaseStats:
    name: Release Stats
    runs-on: ubuntu-latest
    needs: [publishRelease, build-native-dev]
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        if: ${{ steps.docs-change.outputs.docsChange != 'docs only change' }}
        with:
          node-version: 14

      - uses: actions/cache@v2
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}

      - uses: actions/download-artifact@v2
        with:
          name: next-swc-dev-binary
          path: packages/next-swc/native

      - run: cp -r packages/next-swc/native .github/actions/next-stats-action/native

      - run: ./scripts/release-stats.sh
      - uses: ./.github/actions/next-stats-action
        env:
          PR_STATS_COMMENT_TOKEN: ${{ secrets.PR_STATS_COMMENT_TOKEN }}

  build-native-dev:
    name: Build dev binary for tests
    runs-on: ubuntu-18.04
    steps:
      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/checkout@v2
        with:
          fetch-depth: 25

      - run: echo ::set-output name=DOCS_CHANGE::$(node skip-docs-change.js echo 'not-docs-only-change')
        id: docs-change

      - name: Setup node
        uses: actions/setup-node@v2
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE != 'docs only change' }}
        with:
          node-version: 14
          check-latest: true

      - name: Install
        uses: actions-rs/toolchain@v1
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE != 'docs only change' }}
        with:
          profile: minimal
          toolchain: nightly-2021-11-15

      - name: Cache cargo registry
        uses: actions/cache@v1
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE != 'docs only change' }}
        with:
          path: ~/.cargo/registry
          key: stable-ubuntu-18.04-node@14-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE != 'docs only change' }}
        with:
          path: ~/.cargo/git
          key: stable-ubuntu-18.04-node@14-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      # We use week in the turbo cache key to keep the cache from infinitely growing
      - id: get-week
        run: echo ::set-output name=WEEK::$(date +%U)

      # - name: Turbo Cache
      #   id: turbo-cache
      #   uses: actions/cache@v2
      #   if: ${{ steps.docs-change.outputs.DOCS_CHANGE != 'docs only change' }}
      #   with:
      #     path: .turbo
      #     key: turbo-${{ github.job }}-${{ github.ref_name }}-${{ steps.get-week.outputs.WEEK }}-${{ github.sha }}
      #     restore-keys: |
      #       turbo-${{ github.job }}-${{ github.ref_name }}-${{ steps.get-week.outputs.WEEK }}-
      #       turbo-${{ github.job }}-canary-${{ steps.get-week.outputs.WEEK }}-

      # We use restore-key to pick latest cache.
      # We will not get exact match, but doc says
      # "If there are multiple partial matches for a restore key, the action returns the most recently created cache."
      # So we get latest cache
      - name: Cache built files
        uses: actions/cache@v2
        with:
          path: ./packages/next-swc/target
          key: next-swc-cargo-cache-ubuntu-18.04--${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            next-swc-cargo-cache-ubuntu-18.04

      # since the repo's dependencies aren't installed we need
      # to install napi globally
      - run: npm i -g @napi-rs/cli@1.2.1
      - run: npm i -g turbo@1.0.14

      - name: Build
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE != 'docs only change' }}
        working-directory: packages/next-swc
        run: yarn build-native
        env:
          MACOSX_DEPLOYMENT_TARGET: '10.13'
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: nextjs
          TURBO_PROJECT: nextjs

      - name: Upload artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: next-swc-dev-binary
          path: packages/next-swc/native/next-swc.linux-x64-gnu.node

      - name: Clear the cargo caches
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE != 'docs only change' }}
        run: |
          cargo install cargo-cache --no-default-features --features ci-autoclean
          cargo-cache

  test-native:
    name: Unit Test Native Code
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 25
      - run: echo ::set-output name=DOCS_CHANGE::$(node skip-docs-change.js echo 'not-docs-only-change')
        id: docs-change
      - name: Install
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE != 'docs only change' }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-11-15
          profile: minimal
      - run: cd packages/next-swc && cargo test
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE != 'docs only change' }}

  test-wasm:
    name: Test the wasm build
    runs-on: ubuntu-18.04
    needs: [build, build-native-dev, build-wasm-dev]

    steps:
      - uses: actions/cache@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}

      - uses: actions/download-artifact@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        with:
          name: wasm-dev-binary
          path: packages/next-swc/crates/wasm/pkg-nodejs

      - run: ls packages/next-swc/crates/wasm
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - uses: actions/download-artifact@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        with:
          name: next-swc-dev-binary
          path: packages/next-swc/native

      # node version needs to be 16+ to use --no-addons option
      - name: Setup node
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        uses: actions/setup-node@v2
        with:
          node-version: 16
          check-latest: true

      - run: npm i -g playwright-chromium@1.14.1 && npx playwright install-deps
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - run: node ./scripts/setup-wasm.mjs
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

      - run: TEST_WASM=true xvfb-run node run-tests.js test/integration/production/test/index.test.js
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}

  # Build binaries for publishing
  build-native:
    needs: build
    if: ${{ needs.build.outputs.isRelease == 'true' }}
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest, windows-latest]
        description: [default]
        include:
          - os: ubuntu-18.04
            target: x86_64-unknown-linux-gnu
            name: linux-x64-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: win32-x64-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
            name: darwin-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: darwin-arm64
            description: m1

    name: next-swc - ${{ matrix.os }} - ${{ matrix.target }} - node@14
    runs-on: ${{ matrix.os }}

    steps:
      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off
        if: ${{ matrix.os == 'ubuntu-18.04' }}
      - name: tune windows network
        run: Disable-NetAdapterChecksumOffload -Name * -TcpIPv4 -UdpIPv4 -TcpIPv6 -UdpIPv6
        if: ${{ matrix.os == 'windows-latest' }}
      - name: tune mac network
        run: sudo sysctl -w net.link.generic.system.hwcksum_tx=0 && sudo sysctl -w net.link.generic.system.hwcksum_rx=0
        if: ${{ matrix.os == 'macos-latest' }}

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14
          check-latest: true

      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v2

      # since the repo's dependencies aren't installed we need
      # to install napi globally
      - run: npm i -g @napi-rs/cli@1.2.1

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-11-15
          target: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: stable-${{ matrix.os }}-node@14-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: stable-${{ matrix.os }}-node@14-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      # - name: Turbo cache
      #   id: turbo-cache
      #   uses: actions/cache@v2
      #   with:
      #     path: .turbo
      #     key: turbo-${{ github.job }}-${{ matrix.name }}-${{ github.ref_name }}-${{ needs.build.outputs.weekNum }}-${{ github.sha }}
      #     restore-keys: |
      #       turbo-${{ github.job }}-${{ matrix.name }}-${{ github.ref_name }}-${{ needs.build.outputs.weekNum }}-
      #       turbo-${{ github.job }}-${{ matrix.name }}-canary-${{ needs.build.outputs.weekNum }}-

      - name: Cross build aarch64 setup
        if: ${{ matrix.target == 'aarch64-apple-darwin' }}
        run: |
          sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
          export CC=$(xcrun -f clang);
          export CXX=$(xcrun -f clang++);
          SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
          export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
      # We use restore-key to pick latest cache.
      # We will not get exact match, but doc says
      # "If there are multiple partial matches for a restore key, the action returns the most recently created cache."
      # So we get latest cache
      - name: Cache built files
        uses: actions/cache@v2
        with:
          path: ./packages/next-swc/target
          key: next-swc-cargo-cache-${{ matrix.os }}--${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            next-swc-cargo-cache-${{ matrix.os }}

      - name: 'Build'
        working-directory: packages/next-swc
        run: yarn build-native --release --target ${{ matrix.target }}
        env:
          MACOSX_DEPLOYMENT_TARGET: '10.13'
          TURBO_TOKEN: ${{secrets.TURBO_TOKEN}}
          TURBO_TEAM: nextjs
          TURBO_PROJECT: nextjs

      - name: Upload artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: next-swc-binaries
          path: packages/next-swc/native/next-swc.${{ matrix.name }}.node

      - name: Clear the cargo caches
        run: |
          cargo install cargo-cache --no-default-features --features ci-autoclean
          cargo-cache

  build-windows-i686:
    needs: build
    if: ${{ needs.build.outputs.isRelease == 'true' }}
    name: next-swc - windows-i686 - node@14
    runs-on: windows-latest
    env:
      CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 32
      CARGO_PROFILE_RELEASE_LTO: 'false'
    steps:
      - name: Install node x86
        run: |
          choco install nodejs-lts --x86 -y --force
          refreshenv

      - name: Set 32bit Node.js path
        run: |
          echo "C:\\Program Files (x86)\\nodejs" >> $GITHUB_PATH
        shell: bash

      - name: Node.js arch
        run: node -e "console.log(process.arch)"

      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v2

      # since the repo's dependencies aren't installed we need
      # to install napi globally
      - run: npm i -g @napi-rs/cli@1.2.1
      - run: npm i -g turbo@1.0.14
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-11-15
          override: true
          target: i686-pc-windows-msvc

      # - name: Turbo Cache
      #   id: turbo-cache
      #   uses: actions/cache@v2
      #   with:
      #     path: .turbo
      #     key: turbo-${{ github.job }}-${{ github.ref_name }}-${{ needs.build.outputs.weekNum }}-${{ github.sha }}
      #     restore-keys: |
      #       turbo-${{ github.job }}-${{ github.ref_name }}-${{ needs.build.outputs.weekNum }}-
      #       turbo-${{ github.job }}-canary-${{ needs.build.outputs.weekNum }}-

      - name: Build
        shell: bash
        working-directory: packages/next-swc
        run: yarn build-native --release --target i686-pc-windows-msvc

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: next-swc-binaries
          path: packages/next-swc/native/next-swc.win32-ia32-msvc.node

  build-windows-aarch64:
    needs: build
    if: ${{ needs.build.outputs.isRelease == 'true' }}
    name: next-swc - windows-aarch64 - node@14
    runs-on: windows-latest
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v2

      # since the repo's dependencies aren't installed we need
      # to install napi globally
      - run: npm i -g @napi-rs/cli@1.2.1
      - run: npm i -g turbo@1.0.14
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-11-15
          override: true
          target: aarch64-pc-windows-msvc

      # - name: Turbo Cache
      #   id: turbo-cache
      #   uses: actions/cache@v2
      #   with:
      #     path: .turbo
      #     key: turbo-${{ github.job }}-${{ github.ref_name }}-${{ needs.build.outputs.weekNum }}-${{ github.sha }}
      #     restore-keys: |
      #       turbo-${{ github.job }}-${{ github.ref_name }}-${{ needs.build.outputs.weekNum }}-
      #       turbo-${{ github.job }}-canary-${{ needs.build.outputs.weekNum }}-

      - name: Build
        shell: bash
        working-directory: packages/next-swc
        run: yarn build-native --release --target aarch64-pc-windows-msvc

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: next-swc-binaries
          path: packages/next-swc/native/next-swc.win32-arm64-msvc.node

  build-linux-musl:
    needs: build
    if: ${{ needs.build.outputs.isRelease == 'true' }}
    name: next-swc - linux-musl - node@lts
    runs-on: ubuntu-latest
    steps:
      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v2

      - name: Login to registry
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY_URL
        env:
          DOCKER_REGISTRY_URL: ghcr.io
          DOCKER_USERNAME: ${{ github.actor }}
          DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            target/
          key: linux-musl-publish-integration

      - name: Pull docker image
        run: |
          docker pull ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          docker tag ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine builder

      # - name: Turbo Cache
      #   id: turbo-cache
      #   uses: actions/cache@v2
      #   with:
      #     path: .turbo
      #     key: turbo-${{ github.job }}-${{ github.ref_name }}-${{ needs.build.outputs.weekNum }}-${{ github.sha }}
      #     restore-keys: |
      #       turbo-${{ github.job }}-${{ github.ref_name }}-${{ needs.build.outputs.weekNum }}-
      #       turbo-${{ github.job }}-canary-${{ needs.build.outputs.weekNum }}-

      - name: 'Build'
        run: |
          docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd)/packages/next-swc:/build -w /build builder sh -c "npm i -g @napi-rs/cli@1.2.1 && npm i -g turbo@1.0.14 && yarn build-native --release --target x86_64-unknown-linux-musl"

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: next-swc-binaries
          path: packages/next-swc/native/next-swc.linux-x64-musl.node

  build-linux-aarch64:
    needs: build
    if: ${{ needs.build.outputs.isRelease == 'true' }}
    name: next-swc - aarch64-unknown-linux-gnu - node@14
    runs-on: ubuntu-18.04
    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v2

      # since the repo's dependencies aren't installed we need
      # to install napi globally
      - run: npm i -g @napi-rs/cli@1.2.1
      - run: npm i -g turbo@1.0.14

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-11-15
          override: true
          target: aarch64-unknown-linux-gnu

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            target/
          key: aarch64-linux-gnu-publish-integration

      - name: Install cross compile toolchain
        run: |
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu -y

      # - name: Turbo Cache
      #   id: turbo-cache
      #   uses: actions/cache@v2
      #   with:
      #     path: .turbo
      #     key: turbo-${{ github.job }}-${{ github.ref_name }}-${{ needs.build.outputs.weekNum }}-${{ github.sha }}
      #     restore-keys: |
      #       turbo-${{ github.job }}-${{ github.ref_name }}-${{ needs.build.outputs.weekNum }}-
      #       turbo-${{ github.job }}-canary-${{ needs.build.outputs.weekNum }}-

      - name: Cross build aarch64
        working-directory: packages/next-swc
        if: ${{ steps.binary-cache.outputs.cache-hit != 'true' }}
        run: yarn build-native --release --target aarch64-unknown-linux-gnu

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: next-swc-binaries
          path: packages/next-swc/native/next-swc.linux-arm64-gnu.node

  build-linux-aarch64-musl:
    needs: build
    if: ${{ needs.build.outputs.isRelease == 'true' }}
    name: next-swc - aarch64-unknown-linux-musl - node@14
    runs-on: ubuntu-18.04
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v2

      # since the repo's dependencies aren't installed we need
      # to install napi globally
      - run: npm i -g @napi-rs/cli@1.2.1
      - run: npm i -g turbo@1.0.14
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-11-15
          override: true
          target: aarch64-unknown-linux-musl

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            target/
          key: aarch64-linux-musl-publish-integration

      - name: Install cross compile toolchain
        run: |
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu -y

      # - name: Turbo Cache
      #   id: turbo-cache
      #   uses: actions/cache@v2
      #   with:
      #     path: .turbo
      #     key: turbo-${{ github.job }}-${{ github.ref_name }}-${{ needs.build.outputs.weekNum }}-${{ github.sha }}
      #     restore-keys: |
      #       turbo-${{ github.job }}-${{ github.ref_name }}-${{ needs.build.outputs.weekNum }}-
      #       turbo-${{ github.job }}-canary-${{ needs.build.outputs.weekNum }}-

      - name: Cross build aarch64
        working-directory: packages/next-swc
        run: yarn build-native --release --target aarch64-unknown-linux-musl

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: next-swc-binaries
          path: packages/next-swc/native/next-swc.linux-arm64-musl.node

  build-linux-arm7:
    needs: build
    if: ${{ needs.build.outputs.isRelease == 'true' }}
    name: next-swc - arm7-unknown-linux-gnu - node@14
    runs-on: ubuntu-18.04
    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v2

      # since the repo's dependencies aren't installed we need
      # to install napi globally
      - run: npm i -g @napi-rs/cli@1.2.1
      - run: npm i -g turbo@1.0.14

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-11-15
          override: true
          target: armv7-unknown-linux-gnueabihf

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            target/
          key: arm7-linux-gnu-publish-integration

      - name: Install cross compile toolchain
        run: |
          sudo apt-get update
          sudo apt-get install gcc-arm-linux-gnueabihf -y

      # - name: Turbo Cache
      #   id: turbo-cache
      #   uses: actions/cache@v2
      #   with:
      #     path: .turbo
      #     key: turbo-${{ github.job }}-${{ github.ref_name }}-${{ needs.build.outputs.weekNum }}-${{ github.sha }}
      #     restore-keys: |
      #       turbo-${{ github.job }}-${{ github.ref_name }}-${{ needs.build.outputs.weekNum }}-
      #       turbo-${{ github.job }}-canary-${{ needs.build.outputs.weekNum }}-

      - name: Cross build aarch64
        working-directory: packages/next-swc
        run: yarn build-native --release --target armv7-unknown-linux-gnueabihf

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: next-swc-binaries
          path: packages/next-swc/native/next-swc.linux-arm-gnueabihf.node

  build-android-aarch64:
    needs: build
    if: ${{ needs.build.outputs.isRelease == 'true' }}
    name: next-swc - Android - aarch64
    runs-on: macos-latest
    steps:
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v2

      # since the repo's dependencies aren't installed we need
      # to install napi globally
      - run: npm i -g @napi-rs/cli@1.2.1
      - run: npm i -g turbo@1.0.14

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-11-15
          override: true
          target: aarch64-linux-android

      # - name: Turbo Cache
      #   id: turbo-cache
      #   uses: actions/cache@v2
      #   with:
      #     path: .turbo
      #     key: turbo-${{ github.job }}-${{ github.ref_name }}-${{ needs.build.outputs.weekNum }}-${{ github.sha }}
      #     restore-keys: |
      #       turbo-${{ github.job }}-${{ github.ref_name }}-${{ needs.build.outputs.weekNum }}-
      #       turbo-${{ github.job }}-canary-${{ needs.build.outputs.weekNum }}-

      - name: Build
        shell: bash
        working-directory: packages/next-swc
        run: |
          export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/darwin-x86_64/bin/aarch64-linux-android24-clang"
          yarn build-native --release --target aarch64-linux-android

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: next-swc-binaries
          path: packages/next-swc/native/next-swc.android-arm64.node

  build-wasm:
    needs: build
    if: ${{ needs.build.outputs.isRelease == 'true' }}
    strategy:
      matrix:
        target: [web, nodejs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-11-15
          override: true
          target: wasm32-unknown-unknown

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/
            **/target/
          key: ${{ runner.os }}-publish-integration

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build
        run: (wasm-pack build packages/next-swc/crates/wasm --release --scope=next --target ${{ matrix.target }})

      - name: Add target to folder name
        run: mv packages/next-swc/crates/wasm/pkg packages/next-swc/crates/wasm/pkg-${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: wasm-binaries
          path: packages/next-swc/crates/wasm/pkg-*

  build-wasm-dev:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}

      - name: Setup node
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install Rust
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-11-15
          override: true
          target: wasm32-unknown-unknown

      - name: Cache
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/
            **/target/
          key: ${{ runner.os }}-publish-integration

      - name: Cache wasm binary
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        id: binary-cache
        uses: actions/cache@v2
        with:
          path: packages/next-swc/crates/wasm/pkg-nodejs
          key: dev-wasm-next-swc-nightly-2021-11-15-${{ hashFiles('.github/workflows/build_test_deploy.yml', 'packages/next-swc/**') }}

      - name: Install wasm-pack
        if: ${{needs.build.outputs.docsChange != 'docs only change' && steps.binary-cache.outputs.cache-hit != 'true'}}
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build
        if: ${{needs.build.outputs.docsChange != 'docs only change' && steps.binary-cache.outputs.cache-hit != 'true'}}
        run: (wasm-pack build packages/next-swc/crates/wasm --dev --scope=next --target nodejs)

      - name: Add target to folder name
        if: ${{needs.build.outputs.docsChange != 'docs only change' && steps.binary-cache.outputs.cache-hit != 'true'}}
        run: mv packages/next-swc/crates/wasm/pkg packages/next-swc/crates/wasm/pkg-nodejs

      - name: Upload artifact
        if: ${{needs.build.outputs.docsChange != 'docs only change'}}
        uses: actions/upload-artifact@v2
        with:
          name: wasm-dev-binary
          path: packages/next-swc/crates/wasm/pkg-nodejs
