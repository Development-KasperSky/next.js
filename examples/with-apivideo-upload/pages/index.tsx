import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import React, { ChangeEvent, useEffect, useRef, useState } from 'react'
import Card from '../components/Card'
import { VideoUploader, VideoUploadResponse } from '@api.video/video-uploader'
import Status from '../components/Status'
import { useRouter } from 'next/router'
import {
  Button,
  Footer,
  GlobalContainer,
  Header,
  StatusContainer,
  Text,
  TextsContainer,
} from '../style/common'
import useSWR from 'swr'

const fetcher = async (url: string): Promise<any> => {
  return fetch(url).then((res) => res.json())
}

const Home: NextPage = () => {
  const [uploadProgress, setUploadProgress] = useState<number | undefined>(
    undefined
  )
  const [video, setVideo] = useState<VideoUploadResponse | undefined>(undefined)
  const [ready, setReady] = useState<boolean>(false)
  const [status, setStatus] = useState<{ ingested: boolean; encoded: boolean }>(
    { ingested: false, encoded: false }
  )
  const [interId, setInterId] = useState<number | undefined>(undefined)
  const [size, setSize] = useState<
    { width: number; height: number } | undefined
  >(undefined)
  const inputRef = useRef<HTMLInputElement>(null)
  const router = useRouter()

  const { data: uploadToken } = useSWR<{ token: string }>(
    '/api/uploadToken',
    fetcher
  )

  const fetchVideoStatus = async (videoId: string): Promise<void> => {
    const { status } = await fetcher(`/api/${videoId}`)
    const { encoding, ingest } = status
    setStatus({
      ingested: ingest.status === 'uploaded',
      encoded: encoding.playable,
    })
    if (ingest.status === 'uploaded' && encoding.playable) {
      setSize({
        width: encoding.metadata.width,
        height: encoding.metadata.height,
      })
      setReady(true)
    }
  }

  const clearState = (): void => {
    setReady(false)
    setStatus({ ingested: false, encoded: false })
    setVideo(undefined)
    setUploadProgress(undefined)
    setSize(undefined)
  }

  useEffect(() => {
    if (video) {
      const intervalId = window.setInterval(() => {
        fetchVideoStatus(video.videoId)
      }, 1000)
      setInterId(intervalId)
    }
  }, [video, ready])
  useEffect(() => {
    ready && window.clearInterval(interId)
  }, [interId, ready])

  const handleSelectFile = async (
    e: ChangeEvent<HTMLInputElement>
  ): Promise<void> => {
    e.preventDefault()
    clearState()
    if (!e.target.files || !uploadToken) return
    const file = e.target.files[0]
    const uploader = new VideoUploader({
      file,
      uploadToken: uploadToken.token,
    })
    uploader.onProgress((e) =>
      setUploadProgress(Math.round((e.uploadedBytes * 100) / e.totalBytes))
    )
    const video = await uploader.upload()
    setVideo(video)
  }

  const handleNavigate = (): void => {
    if (!video) return
    router.push(`/${video.videoId}?w=${size?.width}&h=${size?.height}`)
  }

  return (
    <GlobalContainer>
      <Head>
        <title>Video Uploader</title>
        <meta
          name="description"
          content="Generated by create next app & created by api.video"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header>
        <span>api.video uploader</span> üöÄ
      </Header>

      <main>
        <TextsContainer>
          <Text>
            Hey fellow dev! üëã <br />
            Welcome to this basic example of video uploader provided by{' '}
            <a
              href="https://api.video"
              target="_blank"
              rel="noopener noreferrer"
            >
              api.video
            </a>{' '}
            and powered by{' '}
            <a
              href="https://nextjs.org/"
              target="_blank"
              rel="noopener noreferrer"
            >
              Vercel & Next.js
            </a>
            .
          </Text>
          <Text>
            api.video provides APIs and clients to handle all your video needs.
            <br />
            This app is built with the{' '}
            <a
              href="https://github.com/apivideo/api.video-nodejs-client"
              target="_blank"
              rel="noopener noreferrer"
            >
              api.video Node.js client
            </a>{' '}
            and the{' '}
            <a
              href="https://github.com/apivideo/api.video-typescript-uploader"
              target="_blank"
              rel="noopener noreferrer"
            >
              Typescript uploader
            </a>
            .
          </Text>
          <Text>
            You can{' '}
            <a
              href="https://github.com/vercel/next.js/tree/canary/examples/with-apivideo-upload"
              target="_blank"
              rel="noopener noreferrer"
            >
              check the source code on GitHub
            </a>
            .
          </Text>
          <Text>
            Please add a video to upload and let the power of the API do the
            rest üé©
          </Text>
        </TextsContainer>

        {!uploadProgress ? (
          <>
            <Button $upload onClick={() => inputRef.current?.click()}>
              Select a file
            </Button>
            <input
              ref={inputRef}
              hidden
              type="file"
              accept="mp4"
              onChange={handleSelectFile}
            />
          </>
        ) : (
          <>
            <StatusContainer>
              <Status title="Uploaded" done={uploadProgress >= 100} />
              <span />
              <Status title="Ingested" done={status.ingested} />
              <span />
              <Status title="Playable" done={status.encoded} />
            </StatusContainer>
            <Card
              content="https://ws.api.video/videos/{videoId}/source"
              url="https://docs.api.video/reference/post_videos-videoid-source"
              method="post"
            />
          </>
        )}

        {ready && video && (
          <Button onClick={handleNavigate}>Watch it üçø</Button>
        )}
      </main>

      <Footer>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
        <span>and</span>
        <a href="https://api.video" target="_blank" rel="noopener noreferrer">
          api.video
        </a>
      </Footer>
    </GlobalContainer>
  )
}

export default Home
